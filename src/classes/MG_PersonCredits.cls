//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class MG_PersonCredits {

    public class Cast_Z {
        @AuraEnabled
        public String character {get;set;}
        @AuraEnabled
        public String credit_id {get;set;}
        @AuraEnabled
        public String poster_path {get;set;}
        @AuraEnabled
        public Integer id {get;set;}
        @AuraEnabled
        public Boolean video {get;set;}
        @AuraEnabled
        public Integer vote_count {get;set;}
        @AuraEnabled
        public Boolean adult {get;set;}
        @AuraEnabled
        public String backdrop_path {get;set;}
        @AuraEnabled
        public List<Integer> genre_ids {get;set;}
        @AuraEnabled
        public String original_language {get;set;}
        @AuraEnabled
        public String original_title {get;set;}
        @AuraEnabled
        public Double popularity {get;set;}
        @AuraEnabled
        public String title {get;set;}
        @AuraEnabled
        public Double vote_average {get;set;}
        @AuraEnabled
        public String overview {get;set;}
        @AuraEnabled
        public String release_date {get;set;}

        public Cast_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'character') {
                            character = parser.getText();
                        } else if (text == 'credit_id') {
                            credit_id = parser.getText();
                        } else if (text == 'poster_path') {
                            poster_path = parser.getText();
                        } else if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'video') {
                            video = parser.getBooleanValue();
                        } else if (text == 'vote_count') {
                            vote_count = parser.getIntegerValue();
                        } else if (text == 'adult') {
                            adult = parser.getBooleanValue();
                        } else if (text == 'backdrop_path') {
                            backdrop_path = parser.getText();
                        } else if (text == 'genre_ids') {
                            genre_ids = arrayOfInteger(parser);
                        } else if (text == 'original_language') {
                            original_language = parser.getText();
                        } else if (text == 'original_title') {
                            original_title = parser.getText();
                        } else if (text == 'popularity') {
                            popularity = parser.getDoubleValue();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else if (text == 'vote_average') {
                            vote_average = parser.getDoubleValue();
                        } else if (text == 'overview') {
                            overview = parser.getText();
                        } else if (text == 'release_date') {
                            release_date = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Cast_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    @AuraEnabled
    public List<Cast_Z> cast_Z {get;set;} // in json: cast
    @AuraEnabled
    public List<Genre_ids> crew {get;set;}
    @AuraEnabled
    public Integer id {get;set;}

    public MG_PersonCredits(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'cast') {
                        cast_Z = arrayOfCast_Z(parser);
                    } else if (text == 'crew') {
                        crew = arrayOfGenre_ids(parser);
                    } else if (text == 'id') {
                        id = parser.getIntegerValue();
                    } else {
                        System.debug(LoggingLevel.WARN, 'MG_PersonCredits consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Genre_ids {

        public Genre_ids(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Genre_ids consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static MG_PersonCredits parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new MG_PersonCredits(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }




    private static List<Genre_ids> arrayOfGenre_ids(System.JSONParser p) {
        List<Genre_ids> res = new List<Genre_ids>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Genre_ids(p));
        }
        return res;
    }



    private static List<Integer> arrayOfInteger(System.JSONParser p) {
        List<Integer> res = new List<Integer>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getIntegerValue());
        }
        return res;
    }






    private static List<Cast_Z> arrayOfCast_Z(System.JSONParser p) {
        List<Cast_Z> res = new List<Cast_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Cast_Z(p));
        }
        return res;
    }






}